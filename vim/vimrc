set autoindent
set expandtab
set mouse=a
set ruler
set softtabstop=2
set shiftwidth=2
set tabstop=2

set backspace=indent,eol,start

set term=xterm-256color

" For copying from visual mode
vmap <C-c> "+yi
vmap <C-x> "+cr

" For cloning a buffer
:command! Clone new | put =getbufline('#',1,'$') | 1d_
" For running a command of an entire buffer
" :command! -nargs=1 Run :%w !<args>
" For running a command of the selected range (or the whole buffer, %)
:command! -range=% -nargs=1 Run <line1>,<line2>:w !<args>

filetype plugin on
syntax on

set colorcolumn=80
set number

call plug#begin()
Plug 'preservim/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'dyng/ctrlsf.vim'

Plug '07734willy/PyRepl'
" Optional, if using scala
" Plug 'derekwyatt/vim-scala'

Plug 'neoclide/coc.nvim', {'do': { -> coc#util#install()}}

" Optional, if `:CocInstall coc-jedi` is annoying
" Plug 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build', 'branch': 'main' }

" Optional, if `:CocInstall @yaegassy/coc-ruff` is annoying
" Plug 'yaegassy/coc-ruff', {'do': 'yarn install --frozen-lockfile'}

" Optional, if `:CocInstall @yaegassy/coc-mypy` is annoying
" Plug 'yaegassy/coc-mypy', {'do': 'yarn install --frozen-lockfile'}

" Optional, if `:CocInstall coc-metals` is annoying
" Plug 'scalameta/coc-metals', {'do': 'yarn install --frozen-lockfile'}

" Also consider running
" `:CocInstall coc-clangd`
" `:CocInstall coc-rust-analyzer`
call plug#end()

filetype plugin on

" Configuration for NERDTree

" Cmd e to toggle
nnoremap <C-e> :NERDTreeToggle<CR>
" Open at startup, but not with cursor there
autocmd VimEnter * NERDTree | wincmd p
" Quit if it's the only buffer left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Configuration for CtrlSF
nnoremap <C-F>f <Plug>CtrlSFPrompt
nnoremap <C-F>t :CtrlSFToggle<CR>

" Configuration for PyRepl (modified from repo readme).
" Note that localleader is typically `\`

" Timeout in seconds for the execution. note that it'll hang vim during
let g:pyrepl_timeout = 3

" Add this statement if you intend to set the mappings yourself
let g:pyrepl_mapkeys = 0

" Mnemonic: "Evaluate [to] End" or "Evaluate Everything"
command Py :PyReplEval

" Given a range, PyReplEval will only evaluate code in that region
" Mnemonic: "Evaluate Until [line]"
command Pyu :0,PyReplEval

" Mnemonic: "Clear"
command Pyc :PyReplStrip output
" Valid arguments to PyReplStrip are `all`, `output`, `input`, `error` (default: `output`)

" Configuration for vim-scala
au BufRead,BufNewFile *.sbt set filetype=scala

" Coc uses byte offsets, so need to set this so that it doesn't blow up.
set encoding=utf-8

" These default mappings should either go in your .vimrc or in a file that
" you're going to source from your .vimrc. For example, you can copy this file
" into your ~ directory and then put the following in your .vimrc to source it
"
" coc.nvim lsp mappings
"if filereadable(expand("~/coc-mappings.vim"))
"  source ~/coc-mappings.vim"
"endif
"
"
" If you're curious how to share this or your .vimrc with both vim and nvim,
" you can find a great instructions about this here
" https://neovim.io/doc/user/nvim.html#nvim-from-vim
"
" Finally, keep in mind that these are "suggested" settings. Play around with
" them and change them to your liking.

" If hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files
set nobackup
set nowritebackup

" You will have a bad experience with diagnostic messages with the default of 4000.
set updatetime=300

" Don't give |ins-completion-menu| messages.
set shortmess+=c

" Always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by another plugin.
" inoremap <expr> <TAB>
"       \ pumvisible() ? coc#pum#next(1) :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr> <S-TAB> pumvisible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

" Used in the tab autocompletion for coc
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to either doHover or show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType scala setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of current line
xmap <leader>a  <Plug>(coc-codeaction-line)
nmap <leader>a  <Plug>(coc-codeaction-line)

" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

command! -nargs=0 FormatImports :call CocAction("runCommand", "ruff.executeOrganizeImports")

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" Notify coc.nvim that <enter> has been pressed.
" Currently used for the formatOnType feature.
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Toggle panel with Tree Views
nnoremap <silent> <space>t :<C-u>CocCommand metals.tvp<CR>
" Toggle Tree View 'metalsPackages'
nnoremap <silent> <space>tp :<C-u>CocCommand metals.tvp metalsPackages<CR>
" Toggle Tree View 'metalsCompile'
nnoremap <silent> <space>tc :<C-u>CocCommand metals.tvp metalsCompile<CR>
" Toggle Tree View 'metalsBuild'
nnoremap <silent> <space>tb :<C-u>CocCommand metals.tvp metalsBuild<CR>
" Reveal current current class (trait or object) in Tree View 'metalsPackages'
nnoremap <silent> <space>tf :<C-u>CocCommand metals.revealInTreeView metalsPackages<CR>

